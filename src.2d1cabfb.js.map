{"version":3,"sources":["index.ts"],"names":[],"mappings":";AAwEC,aAxED,IAAA,EAAA,WAKE,SAAA,IACE,IAAI,EAAe,SAAS,eAAe,SAC3C,EAAiB,WAAW,GA4DhC,OAzDS,EAAA,UAAA,OAAP,SAAc,GACZ,IAAM,EAAS,EAAM,OACrB,GAAK,EAAiB,YAAY,GAAlC,CAGA,IAAI,EAAe,EACnB,EAAiB,WAAW,KAGvB,EAAA,WAAP,SAAkB,GAChB,IAAI,EAAQ,EAAiB,0BAA0B,GAEnD,EAAiB,SAAS,eAAe,YAC7C,GAAK,EAAL,CAIA,IAAI,EAAa,EAAiB,WAAW,GAC7C,GAAK,EAAL,CAIA,IAII,GAFJ,EAAa,EAAW,QAFR,YACA,cAGc,QAAQ,KAClC,EAAW,EAAW,OAAO,EAAG,GAChC,EAAW,EAAW,OAAO,EAAe,GAEhD,EAAe,UAAY,EAAW,6BAA+B,KAGhE,EAAA,WAAP,SAAkB,GAChB,GAAI,MAAM,GACR,MAAO,4BAIT,IACI,GADkB,EAAQ,EAAiB,YACA,EAAiB,oBAChE,OAAI,EAAyB,EAAiB,oBACrC,4BAGE,IAAI,KAAK,GACR,eAGP,EAAA,YAAP,SAAmB,GACjB,MAAyB,SAAlB,EAAO,SAAmC,SAAb,EAAO,IAGtC,EAAA,0BAAP,SAAiC,GAC/B,IAAI,EAAW,EAAa,MAC5B,OAAO,OAAO,IAhET,EAAA,WAAqB,YACrB,EAAA,oBAA8B,IAC9B,EAAA,oBAA8B,OAgEvC,EAnEA,GAqEA,OAAO,OAAS,WACd,IAAI,EAAU,IAAI,EAClB,SAAS,iBAAiB,QAAS,EAAQ","file":"src.2d1cabfb.js","sourceRoot":"../src","sourcesContent":["class TickInputHandler {\n  static epochTicks: number = 621355968000000000;\n  static ticksPerMillisecond: number = 10000;\n  static maxDateMilliseconds: number = 8640000000000000;\n\n  constructor() {\n    var inputElement = document.getElementById(\"ticks\") as HTMLInputElement;\n    TickInputHandler.showResult(inputElement);\n  }\n\n  public doWork(event: KeyboardEvent) {\n    const target = event.target as HTMLElement;\n    if (!TickInputHandler.isTickInput(target)) {\n      return;\n    }\n    var inputElement = target as HTMLInputElement;\n    TickInputHandler.showResult(inputElement);\n  }\n\n  static showResult(inputElement: HTMLInputElement) {\n    var value = TickInputHandler.getTickInputValueAsNumber(inputElement);\n\n    var dateTimeOutput = document.getElementById(\"datetime\");\n    if (!dateTimeOutput) {\n      return;\n    }\n\n    var dateString = TickInputHandler.parseTicks(value);\n    if (!dateString) {\n      return;\n    }\n\n    var goodParts = /([0-9]+)/g;\n    var wrapParts = \"<b>$1</b>\";\n    dateString = dateString.replace(goodParts, wrapParts);\n\n    var firstTIndext = dateString.indexOf(\"T\");\n    var datePart = dateString.substr(0, firstTIndext);\n    var timePart = dateString.substr(firstTIndext + 1);\n\n    dateTimeOutput.innerHTML = datePart + \"<span class='pad'>T</span>\" + timePart;\n  }\n\n  static parseTicks(ticks: number) {\n    if (isNaN(ticks)) {\n      return \"____-__-__T__:__:__.____Z\";\n    }\n\n    // convert the ticks into something javascript understands\n    var ticksSinceEpoch = ticks - TickInputHandler.epochTicks;\n    var millisecondsSinceEpoch = ticksSinceEpoch / TickInputHandler.ticksPerMillisecond;\n    if (millisecondsSinceEpoch > TickInputHandler.maxDateMilliseconds) {\n      return \"9999-99-99T99:99:99:9999Z\";\n    }\n    // output the result in something the human understands\n    var date = new Date(millisecondsSinceEpoch);\n    return date.toISOString();\n  }\n\n  static isTickInput(target: HTMLElement) {\n    return target.tagName == 'INPUT' && target.id == 'ticks';\n  }\n\n  static getTickInputValueAsNumber(inputElement: HTMLInputElement) {\n    var valueStr = inputElement.value;\n    return Number(valueStr);\n  }\n}\n\nwindow.onload = () => {\n  var handler = new TickInputHandler();\n  document.addEventListener(\"keyup\", handler.doWork);\n};\n"]}